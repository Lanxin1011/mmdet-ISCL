import cv2
import os
import aitool
import mmcv



if __name__ == '__main__':
    #gt annotation file
    ann_file = '/mapai/haowenguo/data/fair1m/fair1m_v2/FAIR1M_test2022.json'
    # ann_file = '/mapai/haowenguo/data/GF/airplane/ann_new/instances_test2022.json'
    #detection results generated by detectors, in the format of .json
    identical_str = 'fair_s2anet_120'
    res_files = {
        # 'iou': '/home/xc/mmdetection-aitod/mmdet-aitod/work_dirs/v001.01.01_aitod_faster_rcnn_r50_baseline/v001.01.01.bbox.json',
        'sota': '/mapai/haowenguo/code/SPL/mmrotate/visualization/'+ identical_str +'.bbox.json'} # IS_based_contrastive_learning_serving_thr00_p04_con0.2  faster_r50_on_newset_tsne
    img_dir = '/mapai/haowenguo/data/fair1m/fair1m_v2/trainval-test/'
    # img_dir = '/mapai/haowenguo/data/GF/airplane/trainval-test/'

    sample_basenames = aitool.get_basename_list(
        '/mapai/haowenguo/data/fair1m/fair1m_v2/trainval-test/')
    # print(sample_basenames)
    # samples =['155', '578', '835', '870', '878', '386', '389']
    # samples =['389']
    samples =['923__1__0___0']
    # samples =['142__1__0___0', '156__1__0___0', '245__1__0___0', '268__1__0___0', '691__1__0___0', '728__1__0___0']
    score = 0.8
    final = dict()

    save_dir = '/mapai/haowenguo/data/GF/show_result/'+ identical_str

    try:
        os.mkdir(save_dir)
    except:
        pass
    
    class_dict = {1:'Boeing737', 2:'Boeing747', 3:'Boeing777', 4:'Boeing787', 5:'A220', 6:'A321',
                    7:'A330', 8:'A350', 9:'ARJ21', 10:'other-airplane', 11:'C919'}
    # class_dict = {1:'Boeing737', 2:'Boeing747', 3:'Boeing777', 4:'Boeing787', 5:'A220', 6:'A321',
    #                 7:'A330', 8:'A350', 9:'ARJ21', 10:'others'}

    for method in ['sota']:
        # save_dir = f'/data/small/v1/results/CascadeRCNN/{method}/ship'
        # save_dir = f'/mapai/haowenguo/data/GF/show_result/faster_r50_on_newset/'
        res_file = res_files[method]
        coco_parser = aitool.COCOParser(ann_file)
        objects = coco_parser.objects
        img_name_with_id = coco_parser.img_name_with_id
        # print(img_name_with_id)
        coco_result_parser = aitool.COCOJsonResultParser(res_file)
        for img_name in list(objects.keys())[::-1]:
            count = 0
            # if img_name not in ['0000182_01220_d_0000039__0_0', '0000225_05003_d_0000016__600_0', '1127__1200_1200', 'P2245__1.0__469___0']:
            # continue
            if img_name not in samples:  #  samples  sample_basenames
                continue
            # image_id = img_name_with_id[img_name]
            image_id = img_name  # 此处由于在生成.bbox.json结果时，将'image_id'内容保存成image_name，
                                 # 所以此处相等
            prediction = coco_result_parser(image_id) 
            # print(prediction)
            # assert False
            if len(prediction) == 0:
                continue
            ground_truth = coco_parser(img_name)
            # print(ground_truth)
            # assert False

            img = cv2.imread(os.path.join(img_dir, img_name + '.png'))

            gt_bboxes, pred_bboxes = [], []
            gt_cat_id_list = []
            for _ in ground_truth:
                gt_bboxes.append(_['pointobb'])  # bbox --> pointobb
                gt_cat_id_list.append(_['category_id'])
            
            gt_cat_name_list = [class_dict[k] for k in gt_cat_id_list]


            for _ in prediction:
                if _['score'] < score:
                    continue
                if _['category_id'] > 0:
                    count += 1
                ###
                pred_bboxes_w_cat_id = []
                pred_bboxes_w_cat_id.append(_['poly'])
                pred_bboxes_w_cat_id.append(_['category_id'])
                pred_bboxes.append(pred_bboxes_w_cat_id)
                ###
                # pred_bboxes.append(_['bbox'])

            # print(pred_bboxes)
            # assert False


            gt_bboxes = aitool.drop_invalid_pointobb(gt_bboxes)
            ###
            tmp_pred_bboxes = [_[0] for _ in pred_bboxes]
            bboxes = []
            # print(tmp_pred_bboxes)
            for i in range(len(tmp_pred_bboxes)):
                tmp_bboxes = []
                tmp_bboxes.append(tmp_pred_bboxes[i])
                tmp_bboxes.append(pred_bboxes[i][1])
                bboxes.append(tmp_bboxes)
            # print(bboxes)
            # assert False
            pred_bboxes = aitool.drop_invalid_pointobb_w_cat_id(bboxes)
            pred_cat_id_list = [_[1] for _ in pred_bboxes]

            pred_cat_name_list = [class_dict[k] for k in pred_cat_id_list]

            pred_bboxes = [_[0] for _ in pred_bboxes]
            # print(category_id_list, pred_bboxes)
            ###
            # pred_bboxes = aitool.drop_invalid_bboxes([aitool.xywh2xyxy(_) for _ in pred_bboxes])

            if len(gt_bboxes) == 0:
                continue
            # print(gt_bboxes)
            # print(gt_cat_name_list[3])
            # print(pred_bboxes)
            img = aitool.draw_confusion_matrix_pointobb(img, gt_bboxes, pred_bboxes, gt_cat_name_list, pred_cat_name_list,  # 不需要text就不传入pred_cat_name_list
                                                with_gt_TP=False, line_width=2, font_scale=3, thickness=2)

            if isinstance(img, list):
                continue

            output_file = os.path.join(save_dir, img_name + '_' + identical_str + '.png')
            # print(output_file)
            cv2.imwrite(output_file,img)
            #aitool.show_image(img, output_file=output_file, wait_time=10)